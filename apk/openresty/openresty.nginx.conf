user nginx;
worker_processes  auto;

daemon off;
error_log   /var/log/nginx/error.log;

events {
    worker_connections  1024;
    multi_accept on;
    use epoll;
}

include /etc/nginx/conf.d/*.conf;

env NGINX_RESOLVER;
env REDIS_HOST;
env REDIS_PORT;
env REDIS_DB;

http {
    include       mime.types;
    default_type  text/html;

    log_format simple   '$remote_addr [$time_local] $host "$request" $status $bytes_sent $request_time "$http_referer" "$http_user_agent"';
    log_format backends '$remote_addr [$time_local] $host "$request" $status $bytes_sent $request_time "$http_referer" "$http_user_agent" $upstream_response_time $upstream_addr';

    access_log  /var/log/nginx/access.log backends;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;

    open_file_cache             max=100000 inactive=20s;
    open_file_cache_valid       30s;
    open_file_cache_min_uses    2;
    open_file_cache_errors      on;

    gzip              on;
    gzip_proxied      any;
    gzip_http_version 1.1;
    gzip_min_length   999;
    gzip_comp_level   4;
    gzip_buffers      4 32k;
    gzip_types        text/plain text/xml text/css application/xml application/xml+rss application/atom+xml application/javascript application/x-javascript text/javascript application/json image/svg+xml;
    gzip_vary         on;

    server_tokens                       off;

    # This dictionary is required if you want to use dns:resolve_with_cache method from dns module
    lua_shared_dict dns_cache 2m;

    include /etc/nginx/vhosts/*.conf;
}
